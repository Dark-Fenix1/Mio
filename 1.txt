import 'dart:io';
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';
import 'package:geolocator/geolocator.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Reporte de Eventos'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => ReportListScreen()),
                );
              },
              child: Text('Ver Reportes'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => NewReportScreen()),
                );
              },
              child: Text('Generar un Nuevo Reporte'),
            ),
          ],
        ),
      ),
    );
  }
}

class NewReportScreen extends StatefulWidget {
  @override
  _NewReportScreenState createState() => _NewReportScreenState();
}

class _NewReportScreenState extends State<NewReportScreen> {
  final TextEditingController descriptionController = TextEditingController();
  File? _image;
  double? _latitude;
  double? _longitude;

  @override
  void initState() {
    super.initState();
    _getLocation();
  }

  Future<void> _getLocation() async {
    try {
      Position position = await Geolocator.getCurrentPosition(
          desiredAccuracy: LocationAccuracy.high);
      setState(() {
        _latitude = position.latitude;
        _longitude = position.longitude;
      });
    } catch (e) {
      print('Error al obtener la ubicación: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Nuevo Reporte'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            TextField(
              controller: descriptionController,
              decoration: InputDecoration(labelText: 'Descripción del evento'),
            ),
            TextField(
              controller: TextEditingController(text: _latitude?.toString() ?? ''),
              decoration: InputDecoration(labelText: 'Latitud'),
              keyboardType: TextInputType.number,
            ),
            TextField(
              controller: TextEditingController(text: _longitude?.toString() ?? ''),
              decoration: InputDecoration(labelText: 'Longitud'),
              keyboardType: TextInputType.number,
            ),
            SizedBox(height: 20),
            _image != null
                ? Image.file(_image!)
                : ElevatedButton(
                    onPressed: _getImage,
                    child: Text('Seleccionar Imagen'),
                  ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () async {
                try {
                  await saveReport();
                  Navigator.pop(context);
                } catch (e) {
                  print('Error al guardar el reporte: $e');
                }
              },
              child: Text('Guardar Reporte'),
            ),
          ],
        ),
      ),
    );
  }

  Future<void> saveReport() async {
    final database = await openDatabase(
      join(await getDatabasesPath(), 'reports_database.db'),
      version: 1,
    );

    await createTable(database);

    await database.transaction((txn) async {
      await txn.rawInsert(
        'INSERT OR REPLACE INTO Reports (user_id, description, latitude, longitude, timestamp, image_path) VALUES (?, ?, ?, ?, ?, ?)',
        [
          1,
          descriptionController.text,
          _latitude ?? 0.0,
          _longitude ?? 0.0,
          DateTime.now().toUtc().toIso8601String(),
          _image != null ? _image!.path : null,
        ],
      );
    });

    await database.close();
  }

  Future<void> createTable(Database database) async {
    await database.transaction((txn) async {
      await txn.execute(
        'CREATE TABLE IF NOT EXISTS Reports(id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, description TEXT, '
        'latitude REAL, longitude REAL, timestamp DATETIME, image_path TEXT)',
      );
    });
  }

  Future<void> _getImage() async {
    final imagePicker = ImagePicker();
    final pickedImage = await imagePicker.getImage(source: ImageSource.gallery);

    setState(() {
      if (pickedImage != null) {
        _image = File(pickedImage.path);
      }
    });
  }
}

class ReportListScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Reportes'),
      ),
      body: FutureBuilder<List<Map<String, dynamic>>>(
        future: getReports(),
        builder: (context, snapshot) {
          if (!snapshot.hasData || snapshot.data!.isEmpty) {
            return Center(
              child: Text('No hay reportes disponibles.'),
            );
          }

          return ListView.builder(
            itemCount: snapshot.data!.length,
            itemBuilder: (context, index) {
              final report = snapshot.data![index];

              return ListTile(
                title: Text(report['description']),
                subtitle: Text(report['timestamp']),
                onTap: () {
                  // Navegar a la pantalla de detalles con los detalles del reporte
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => ReportDetailScreen(report: report),
                    ),
                  );
                },
              );
            },
          );
        },
      ),
    );
  }

  Future<List<Map<String, dynamic>>> getReports() async {
    final database = await openDatabase(
      join(await getDatabasesPath(), 'reports_database.db'),
      version: 1,
    );

    await createTable(database);

    return await database.query('Reports');
  }

  Future<void> createTable(Database database) async {
    await database.transaction((txn) async {
      await txn.execute(
        'CREATE TABLE IF NOT EXISTS Reports(id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, description TEXT, '
        'latitude REAL, longitude REAL, timestamp DATETIME, image_path TEXT)',
      );
    });
  }
}

class ReportDetailScreen extends StatelessWidget {
  final Map<String, dynamic> report;

  const ReportDetailScreen({required this.report});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Detalles del Reporte'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Text('Descripción: ${report['description']}'),
            Text('Latitud: ${report['latitude']}'),
            Text('Longitud: ${report['longitude']}'),
            Text('Fecha y Hora: ${report['timestamp']}'),
            // Puedes mostrar la imagen aquí si se ha adjuntado
            if (report['image_path'] != null)
              Image.file(File(report['image_path'])),
          ],
        ),
      ),
    );
  }
}

